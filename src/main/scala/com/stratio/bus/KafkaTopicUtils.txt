package com.stratio.bus;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import kafka.admin.AdminUtils;
import kafka.common.Topic;
import kafka.javaapi.TopicMetadata;
import kafka.javaapi.TopicMetadataRequest;
import kafka.javaapi.consumer.SimpleConsumer;
import kafka.utils.ZKStringSerializer;
import kafka.utils.ZkUtils;

import org.I0Itec.zkclient.ZkClient;
import org.I0Itec.zkclient.exception.ZkMarshallingError;
import org.I0Itec.zkclient.serialize.ZkSerializer;

import scala.collection.Map;
import scala.collection.Seq;
import ca.zmatrix.cli.ParseCmd;


public class KafkaTopicUtils {

	public KafkaTopicUtils() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		createOrUpdateTopicFromCommandLine(args);
		
        
	}
	
	
	/**
	 * @param args
	 * 
	 * usage from command line: --zookeeper ip:port  --topic topicName --replica n --partition n
	 * 
	 * 
	 */
	private static void createOrUpdateTopicFromCommandLine(String[] args) {
		
		
//		DECODING ARGUMENTS FROM COMMAND LINE
		String usage = "usage: --zookeeper ip:port  --topic topicName --replica n --partition n";
        ParseCmd cmd = new ParseCmd.Builder()
        							.help(usage)                          
        							.parm("--zookeeper", "255.25.25.255:9999" ).rex("^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}:[0-9]{1,4}$").req()       
        							.parm("--topic",     "topicName" ).req()    
        							.parm("--partition", "1" ).req()
        							.parm("--replica",   "1" ).req()        							
        							.build();  
       
        HashMap<String, String> R = new HashMap<String,String>();
        String parseError    = cmd.validate(args);
        if( cmd.isValid(args) ) {
            R = (HashMap<String, String>) cmd.parse(args);
            System.out.println("Launching topic creation with these params:"); 
            System.out.println(cmd.displayMap(R));
        }
        else { 
        	System.out.println(parseError); 
        	System.exit(1); 
        } 
        
        
        
        
//      CREATION OF TOPIC WITH DESIRED SETTINGS 
        createTopic(R.get("--zookeeper").toString(),
        				R.get("--topic").toString(),
        				Integer.parseInt(R.get("--partition").toString()),
        				Integer.parseInt(R.get("--replica").toString()));
        
        try {
			Thread.currentThread().sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        System.out.println(getNumPartitionsForTopic(R.get("--zookeeper").toString().replace(":2181", ""), 9092,R.get("--topic").toString()));
                		
	}
	
	
	
	/**
	 * @param zookeeperCluster
	 * @param topic
	 * @param numPartitions
	 * @param replicationFactor
	 * @return
	 * 
	 * 
	 * Creates a connection with zookeeper cluster and creates/updates the topic
	 * 
	 */
	public static boolean createTopic(String zookeeperCluster, String topic, 
											Integer numPartitions, Integer replicationFactor) {
		
  	
		
		
		ZkClient zkClient = new ZkClient(zookeeperCluster, 30000, 30000);
		zkClient.setZkSerializer(new ZkSerializer() {
		      @Override
		      public byte[] serialize(Object o)
		          throws ZkMarshallingError
		      {
		        return ZKStringSerializer.serialize(o);
		      }
		 
		      @Override
		      public Object deserialize(byte[] bytes)
		          throws ZkMarshallingError
		      {
		        return ZKStringSerializer.deserialize(bytes);
		      }
		    });
//		CreateTopicCommand.createTopic(zkClient, topic, numPartitions.intValue(), replicationFactor.intValue(), "");

       	createOrUpdateTopic(zkClient, topic, numPartitions, replicationFactor);
       	zkClient.close();
        
        return true;
	}
	
	
	
	/**
	 * @param zkClient
	 * @param topic
	 * @param numPartitions
	 * @param replicationFactor
	 * @return
	 */
	private static boolean createOrUpdateTopic(ZkClient zkClient, String topic, Integer numPartitions, Integer replicationFactor) {
	    
		Topic.validate(topic);

	    Seq<Object> brokerList = ZkUtils.getSortedBrokerList(zkClient);

	    Map<Object, Seq<Object>> partitionReplicaAssignment = null;
	    
		
		partitionReplicaAssignment = AdminUtils.assignReplicasToBrokers(brokerList, numPartitions, replicationFactor, 
		    		  								0, //fixedStartIndex
		    		  								0 //startPartitionId
		    		  								);
		
	    System.out.println("Replica assignment list for " + topic + " is " + partitionReplicaAssignment.toString());
	    AdminUtils.createOrUpdateTopicPartitionAssignmentPathInZK(topic, partitionReplicaAssignment, zkClient, true);
	    
	    return true;
	}
	
	
	/**
	 * @param brokerList
	 * @param brokerPort
	 * @param topic
	 * @return the number of partitions in this topic
	 */
	public static int getNumPartitionsForTopic(String brokerList, int brokerPort, String topic) {
		
		List<TopicMetadata> topicMetadataList = null;
		SimpleConsumer consumer  = new SimpleConsumer(brokerList, brokerPort, 100000, 64 * 1024, "topicLookup");
		
		List topics = new ArrayList();
        topics.add(topic);
        
        
        topicMetadataList = (consumer.send(new TopicMetadataRequest(topics))).topicsMetadata();
        int numPartitions = topicMetadataList.get(0).partitionsMetadata().size();
                       
        
        consumer.close();
        
        return numPartitions;
	}
	
}
